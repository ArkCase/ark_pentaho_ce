#!/bin/bash
[ "$(/usr/bin/id -u)" -eq 0 ] || exec /usr/bin/sudo --non-interactive --preserve-env "${0}" "${@}"

set -euo pipefail

say() {
	echo -e "$(/usr/bin/date -u -Isec): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

to_boolean() {
	case "${1,,}" in
		true | t | 1 | yes | on | enabled | enable ) echo "true" ;;
		* ) echo "false" ;;
	esac
}

is_valid_hostname() {
	local NAME="${1,,}"
	[[ "${NAME}" =~ ^([a-z0-9][-a-z0-9]*)?[a-z0-9]([.]([a-z0-9][-a-z0-9]*)?[a-z0-9])*$ ]] || return 1
	return 0
}

is_valid_port() {
	local PORT="${1}"
	[[ "${PORT}" =~ ^(0|[1-9][0-9]*)$ ]] || return 1
	[ ${PORT} -gt 0 ] || return 1
	[ ${PORT} -lt 65536 ] || return 1
	return 0
}

validate_cert() {
	local CERT="${1}"
	[ -e "${CERT}" ] || return 1
	[ -f "${CERT}" ] || return 1
	[ -r "${CERT}" ] || return 1
	[ -s "${CERT}" ] || return 1
	/usr/bin/openssl x509 -noout -text -in "${CERT}" &>/dev/null || return ${?}
	return 0
}

is_ca() {
	local CERT="${1}"
	validate_cert "${CERT}" || return ${?}
	# Is the certificate a CA certificate of some kind?
	/usr/bin/openssl x509 -noout -ext basicConstraints -in "${CERT}" | \
		/usr/bin/tail -n +2 | \
		/usr/bin/sed -e 's;, ;\n;g' -e 's;^\s*;;g' | \
		/usr/bin/grep -qi "^CA:TRUE" || return ${?}
	return 0
}

install_chain() {
	local CERT_BASE_NAME="${1}"
	local DEST="$(/usr/bin/readlink -f "$(/usr/bin/mktemp -d)")"
	( cd "${DEST}" && /usr/bin/csplit /dev/stdin '/BEGIN CERTIFICATE/' '{*}' ) || return $?
	while read n ; do
		# Leave only the certificate bits in each split out file
		/usr/bin/sed -i -e '/^-\+END CERTIFICATE-\+$/q' "${n}"

		# Keep only the files that contain certificate bits
		/usr/bin/grep -q "END CERTIFICATE" "${n}" && \
			is_ca "${n}" && \
			/usr/bin/mv -vf "${n}" "${ANCHORS}/${CERT_BASE_NAME}.${n##*/}.pem"

		rm -f "${n}" &>/dev/null
	done < <(/usr/bin/find "${DEST}" -mindepth 1 -maxdepth 1 -type f -name 'xx*')
	rm -rf "${DEST}"
}

download_authorities() {
	local HOST="${1}"
	local SNI="${2}"
	local PORT="${3}"
	local TARGET="${4}"

	local SNI_FLAGS=()
	[ -n "${SNI}" ] && SNI_FLAGS+=(-servername "${SNI}")

	local CERT_BASE_NAME="${TARGET}/${SNI}"
	[ -n "${SNI}" ] && CERT_BASE_NAME+="@"
	CERT_BASE_NAME+="${HOST}:${PORT}"

	/usr/bin/openssl s_client -connect "${HOST}:${PORT}" \
		"${SNI_FLAGS[@]}" -showcerts </dev/null 2>/dev/null | \
		install_chain "${CERT_BASE_NAME}"
	return 0
}

[ -v SSL_TRUSTS_DIR ] || SSL_TRUSTS_DIR="/.ssl-trusts"

INSTALLED="false"

[ -v SSL_TARGET ] || SSL_TARGET="/etc/pki/ca-trust/source"
[ -v ANCHORS ] || ANCHORS="${SSL_TARGET}/anchors"

# Try to get the CA from the LDAP URL. If this fails, it's not critical
[ -v LDAP_URL ] || LDAP_URL="ldaps://ldap"
if [[ "${LDAP_URL}" =~ ^ldap(s)?://([^:/]+)(:[0-9]+)? ]] ; then
	LDAP_HOST="${BASH_REMATCH[2]}"
	LDAP_PORT="${BASH_REMATCH[3]}"
	if [ -z "${LDAP_PORT}" ] ; then
		# No port specified, so use one of the default ports
		LDAP_PORT=389
		[ -n "${BASH_REMATCH[1]}" ] && LDAP_PORT=636
	else
		# The port may contain leading colons and zeroes, so remove them
		LDAP_PORT="$(/usr/bin/sed -e 's;^:*;;g' -e 's;^0*;;g' < <(echo -n "${LDAP_PORT}"))"
	fi

	# 1) Try to fetch the actual certificates served up by Step-CA. If this fails,
	# it's non-fatal b/c we do this "blindly" every time to avoid having to add more
	# complex and difficult logic into Helm and other places ... i.e. if the target
	# environment lacks this, this is fine - they'll just have to manage the CAs
	# manually by some other means, and use the INIT_SSL_SERVERS variable to do so
	say "Fetching the Step-CA root certificate from host ${LDAP_HOST}"
	if /usr/bin/curl -kL --connect-timeout 5 -o >(install_chain "step-ca") "https://${LDAP_HOST}:9000/roots.pem" 2>&1 ; then
		say "\tFetched the Step-CA root certificate from [${LDAP_HOST}]"
		INSTALLED="true"
	else
		say "\tWARNING: failed to fetch the Step-CA root certificate from [${LDAP_HOST}] (rc=${?})"
	fi

	# 2) Try to see if the LDAP server itself is serving up its CA certificates
	if download_authorities "${LDAP_HOST}" "" "${LDAP_PORT}" "${ANCHORS}" ; then
		INSTALLED="true"
	else
		say "WARNING: Failed to fetch the certificates from host ${LDAP_HOST}, port ${LDAP_PORT}"
	fi
else
	say "LDAP URL [${LDAP_URL}] couldn't be parsed properly, won't try to fetch its certificates"
fi

if [ -d "${SSL_TRUSTS_DIR}" ] ; then
	say "Deploying the common trusted certificates from [${SSL_TRUSTS_DIR}]"
	SSL_TRUSTS_DIR="$(/usr/bin/readlink -f "${SSL_TRUSTS_DIR}")"

	while read cert ; do
		CERT="${cert##*/}"
		if [ -f "${CERT}" ] ; then
			say "\tWARNING: The certificate [${CERT}] is not a regular file, skipping"
			continue
		fi

		case "${CERT,,}" in
			# If the data is an actual certificate, copy it verbatim
			*.pem )
				say "\tDeploying certificate [${CERT}]..."
				install_chain "${CERT%.*}" < "${cert}"
				;;

			# If the data is a URL, then try to pull it down and put the resulting file into
			# the SSL_TARGET location using ${CERT} as the name
			*.url )
				URL="$(/usr/bin/cat "${cert}")"
				[[ "${URL}" =~ ^([^:/?#]+)://([^/?#]*)?([^?#]*)([?]([^#]*))?(#(.*))?$ ]] || fail "\tThe certificate [${CERT}] is invalid - the URL syntax is invalid: [${URL}]"
				say "\tDownloading the certificate [${CERT}] from [${URL}]..."
				TMPFILE="$(/usr/bin/mktemp)"
				/usr/bin/curl -kL -o >(install_chain "${CERT%.*}") "${URL}" || fail "\tFailed to download the certificate [${CERT}] from the URL [${URL}]"
				;;

			*.ssl )
				SERVER="$(/usr/bin/cat "${cert}")"
				[[ "${SERVER}" =~ ^(([^@]+)@)?(([^:]+):([0-9]+))$ ]] || fail "\tThe certificate [${CERT}] is invalid - the SSL server string [${SERVER}] did not match the required pattern ([serverName@]hostNameOrIP:port)"
				SERVER_NAME="${BASH_REMATCH[2]}"
				HOST_NAME="${BASH_REMATCH[4]}"
				PORT="${BASH_REMATCH[5]}"
				if [ -n "${SERVER_NAME}" ] ; then
					is_valid_hostname "${SERVER_NAME}" || fail "\tInvalid server name [${SERVER_NAME}] in spec [${SERVER}] from [${CERT}]"
				fi
				is_valid_hostname "${HOST_NAME}" || fail "\tInvalid host name [${HOST_NAME}] in spec: [${SERVER}] from [${CERT}]"
				is_valid_port "${PORT}" || fail "\tInvalid port number [${PORT}] in spec: [${SERVER}] from [${CERT}]"
				download_authorities "${HOST_NAME}" "${SERVER_NAME}" "${PORT}" "${ANCHORS}" || fail "\tFailed to download the certificate from [${SERVER}] from [${CERT}]"
				;;

			* )
				say "\tWARNING: Don't know how to handle certificate [${CERT}], skipping"
				continue
				;;
		esac
	done < <(/usr/bin/find "${SSL_TRUSTS_DIR}" -mindepth 1 -maxdepth 1 -name "ssl-trust-*.*" | /usr/bin/sort)
fi

say "Updating the trusted certificates"
/usr/bin/chown -R root:root "${SSL_TARGET}"
/usr/bin/chmod -R 0440 "${SSL_TARGET}"
exec /usr/bin/update-ca-trust extract
